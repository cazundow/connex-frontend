{"ast":null,"code":"var _jsxFileName = \"/Users/dominator/Documents/playground/connex-frontend/src/components/metrics.js\";\nimport React, { useState, useEffect } from 'react';\nimport Loader from './loader';\nimport PropTypes from 'prop-types';\nimport './css/metrics.css';\nexport default function Metrics(props) {\n  const [metrics, setMetrics] = useState([]);\n  const [err, setErr] = useState(false);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    getMetrics();\n  }, []);\n  useEffect(() => {\n    setTimeout(() => {\n      getMetrics();\n    }, 30000);\n  }, [metrics]);\n  const m = metrics[metrics.length - 1];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-xs-12 col-sm-6 metrics-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, \" \", loading ? /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 70\n    }\n  }) : m);\n\n  async function getMetrics() {\n    setLoading(true);\n    let response = await fetch('http://localhost:3000/metrics', {\n      headers: new Headers({\n        method: 'get',\n        \"Authorization\": `mysecrettoken`\n      })\n    });\n    let metric = await response.text();\n    console.log(metric);\n\n    if (metric.status != 200) {\n      setErr(true);\n    }\n\n    const newState = [metric];\n    setMetrics(newState);\n    setLoading(false);\n  }\n}","map":{"version":3,"sources":["/Users/dominator/Documents/playground/connex-frontend/src/components/metrics.js"],"names":["React","useState","useEffect","Loader","PropTypes","Metrics","props","metrics","setMetrics","err","setErr","loading","setLoading","getMetrics","setTimeout","m","length","response","fetch","headers","Headers","method","metric","text","console","log","status","newState"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAO,mBAAP;AAGA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACvC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACQ,GAAD,EAAMC,MAAN,IAAgBT,QAAQ,CAAC,KAAD,CAA9B;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,KAAD,CAAtC;AAGAC,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,UAAU;AAEb,GAHQ,EAGN,EAHM,CAAT;AAKAX,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,UAAU,CAAC,MAAI;AACXD,MAAAA,UAAU;AACb,KAFS,EAEP,KAFO,CAAV;AAGH,GAJQ,EAIN,CAACN,OAAD,CAJM,CAAT;AAMA,QAAMQ,CAAC,GAAGR,OAAO,CAACA,OAAO,CAACS,MAAR,GAAiB,CAAlB,CAAjB;AAGA,sBAAQ;AAAK,IAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAmDL,OAAO,gBAAG,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAgBI,CAA1E,CAAR;;AAEI,iBAAeF,UAAf,GAA2B;AACvBD,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD,QAAIK,QAAQ,GAAI,MAAMC,KAAK,CAAC,+BAAD,EAAkC;AAC5DC,MAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AACjBC,QAAAA,MAAM,EAAE,KADS;AAEjB,yBAAkB;AAFD,OAAZ;AADmD,KAAlC,CAA3B;AAMC,QAAIC,MAAM,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;;AACC,QAAGA,MAAM,CAACI,MAAP,IAAiB,GAApB,EAAyB;AACtBhB,MAAAA,MAAM,CAAC,IAAD,CAAN;AACF;;AACD,UAAMiB,QAAQ,GAAI,CAACL,MAAD,CAAlB;AAEAd,IAAAA,UAAU,CAACmB,QAAD,CAAV;AACAf,IAAAA,UAAU,CAAC,KAAD,CAAV;AAEJ;AACJ","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport Loader from './loader'; \nimport PropTypes from 'prop-types'\n\nimport './css/metrics.css'\n\n\nexport default function Metrics(props) {\nconst [metrics, setMetrics] = useState([]); \nconst [err, setErr] = useState(false); \nconst [loading, setLoading] = useState(false); \n\n\nuseEffect(() => {\n    getMetrics();\n  \n}, [])\n\nuseEffect(() => {\n    setTimeout(()=>{\n        getMetrics();\n    }, 30000)\n}, [metrics])\n\nconst m = metrics[metrics.length - 1]\n\n\nreturn  <div className=\"col-xs-12 col-sm-6 metrics-wrap\"> {loading ? <Loader /> : m}</div>\n\n    async function getMetrics(){\n        setLoading(true);\n       let response =  await fetch('http://localhost:3000/metrics', {\n        headers: new Headers({\n            method: 'get', \n            \"Authorization\": `mysecrettoken`\n          })\n       }); \n        let metric = await response.text();\n        console.log(metric);\n         if(metric.status != 200) {\n            setErr(true)\n         }\n         const newState =  [metric]\n         \n         setMetrics(newState);\n         setLoading(false);\n       \n    }\n}\n"]},"metadata":{},"sourceType":"module"}