{"ast":null,"code":"var _jsxFileName = \"/Users/dominator/Documents/playground/connex-frontend/src/components/metrics.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nexport default function Metrics() {\n  const [metrics, setMetrics] = useState();\n  const [loading, setLoading] = useState();\n  const [err, setErr] = useState(false);\n  useEffect(() => {\n    getMetrics();\n  }, []);\n  useEffect(() => {\n    setTimeout(() => {\n      getMetrics();\n    }, 30000);\n  }, [metrics]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-xs-12 col-sm-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 17\n    }\n  }, metrics);\n\n  async function getMetrics() {\n    setLoading(true);\n    let response = await fetch('http://localhost:3000/metrics', {\n      headers: new Headers({\n        method: 'get',\n        \"Authorization\": `mysecrettoken`\n      })\n    });\n    let time = await response.json();\n\n    if (time.status != 200) {\n      setErr(true);\n    }\n\n    const newState = [...timeStamps, time];\n    setMetrics(newState);\n    setLoading(false);\n  }\n}","map":{"version":3,"sources":["/Users/dominator/Documents/playground/connex-frontend/src/components/metrics.js"],"names":["React","useState","useEffect","PropTypes","Metrics","metrics","setMetrics","loading","setLoading","err","setErr","getMetrics","setTimeout","response","fetch","headers","Headers","method","time","json","status","newState","timeStamps"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,eAAe,SAASC,OAAT,GAAmB;AAClC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,EAAtC;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,EAAtC;AACA,QAAM,CAACQ,GAAD,EAAMC,MAAN,IAAgBT,QAAQ,CAAC,KAAD,CAA9B;AAGAC,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,UAAU;AAEb,GAHQ,EAGN,EAHM,CAAT;AAKAT,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,UAAU,CAAC,MAAI;AACXD,MAAAA,UAAU;AACb,KAFS,EAEP,KAFO,CAAV;AAGH,GAJQ,EAIN,CAACN,OAAD,CAJM,CAAT;AAMI,sBACY;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,OADL,CADZ;;AAOA,iBAAeM,UAAf,GAA2B;AACvBH,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD,QAAIK,QAAQ,GAAI,MAAMC,KAAK,CAAC,+BAAD,EAAkC;AAC5DC,MAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AACjBC,QAAAA,MAAM,EAAE,KADS;AAEjB,yBAAkB;AAFD,OAAZ;AADmD,KAAlC,CAA3B;AAMC,QAAIC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAjB;;AACC,QAAGD,IAAI,CAACE,MAAL,IAAe,GAAlB,EAAuB;AACpBV,MAAAA,MAAM,CAAC,IAAD,CAAN;AACF;;AACD,UAAMW,QAAQ,GAAI,CAAC,GAAGC,UAAJ,EAAgBJ,IAAhB,CAAlB;AAEAZ,IAAAA,UAAU,CAACe,QAAD,CAAV;AACAb,IAAAA,UAAU,CAAC,KAAD,CAAV;AAEJ;AACJ","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport PropTypes from 'prop-types'\n\nexport default function Metrics() {\nconst [metrics, setMetrics] = useState(); \nconst [loading, setLoading] = useState(); \nconst [err, setErr] = useState(false); \n\n\nuseEffect(() => {\n    getMetrics();\n  \n}, [])\n\nuseEffect(() => {\n    setTimeout(()=>{\n        getMetrics();\n    }, 30000)\n}, [metrics])\n\n    return (\n                <div className=\"col-xs-12 col-sm-6\">\n                    {metrics}\n                </div>\n    )\n\n\n    async function getMetrics(){\n        setLoading(true);\n       let response =  await fetch('http://localhost:3000/metrics', {\n        headers: new Headers({\n            method: 'get', \n            \"Authorization\": `mysecrettoken`\n          })\n       }); \n        let time = await response.json();\n         if(time.status != 200) {\n            setErr(true)\n         }\n         const newState =  [...timeStamps, time]\n         \n         setMetrics(newState);\n         setLoading(false);\n       \n    }\n}\n"]},"metadata":{},"sourceType":"module"}